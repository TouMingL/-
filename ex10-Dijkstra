#include<stdio.h>
#include<stdlib.h>
#include<string.h> 

//操作返回代码   
#define OK 1    
#define ERROR 0
#define OVERFLOW -1 
typedef int Status;

/********************************图的存储结构定义***********************/ 
#define MaxVerNum 30  //最大顶点数量 
#define INF 9999      //无穷大 
           
typedef char VexType;  //顶点数据类型 
typedef int ArcType;      //边的权值类型 
 
typedef  struct 
{ 
    VexType  vexs[MaxVerNum];        
    ArcType  arcs[MaxVerNum][MaxVerNum];   
    int vernum,arcnum;                            
}AMGragh; 

/*建立图G的邻接矩阵  */
Status CreateAMGraph(AMGragh *G) 
{   
int i,j,k;			//工具人 
	int x,y;			//矩阵坐标 
	int w;
	char v1,v2,message;
	printf("请输入矩阵的顶点数,边数：");
	scanf("%d %d",&(G->vernum),&(G->arcnum));
	
	printf("\n请输入矩阵的顶点信息：\n");
	for(i=0;i<G->vernum;i++){
		printf("V%d:",i);
		getchar();
		scanf("%c",&message);
		G->vexs[i]=message;
		printf("\n");
	}
	
	for(i=0;i<G->vernum;++i)
		for(j=0;j<G->vernum;++j)
			G->arcs[i][j]=INF;	//初始化 
	printf("\n请输入一条边依附的顶点以及权值，分别为：\n头 尾 权\n");
	for(k=0;k<G->arcnum;++k){
		
		getchar();
		scanf("%c %c %d",&v1,&v2,&w);
		for(i=0;i<G->vernum;i++){
			
			if(G->vexs[i]==v1)
				x=i;
			if(G->vexs[i]==v2)
				y=i;
		}
		
		G->arcs[x][y]=w;
	}
	return OK;
}

//打印图(邻接矩阵) 
void printGraph(AMGragh G)
{
	printf("\n图G的邻接矩阵\n");
	printf("顶点：\n\t");
	for(int i=0;i<G.vernum;i++)
	{
		printf("%c\t",G.vexs[i]);
	}
	
	printf("\n邻接矩阵：\n\t");
	for(int i=0;i<G.vernum;i++)
	{
		printf("%c\t",G.vexs[i]);
	}
	printf("\n");
	for(int i=0;i<G.vernum;i++)	
	{
		printf("%c\t",G.vexs[i]);
		for(int j=0;j<G.vernum;j++)
		{
			printf("%d\t",G.arcs[i][j]);
		}
		printf("\n");		
	}
}


/**************************Dijkstra算法**********************/
void Dijkstra(AMGragh G,int v0,int D[],int P[])
{
	int i,j,k;
    int min;
    int tmp;
    int flag[G.arcnum];      // flag[i]=1表示"顶点vs"到"顶点i"的最短路径已成功获取。

    // 初始化
    for (i = 0; i < G.vernum; i++)
    {
        flag[i] = 0;              // 顶点i的最短路径还没获取到。
        D[i] = 0;              // 顶点i的前驱顶点为0。
        P[i] = G.arcs[v0][i];// 顶点i的最短路径为"顶点vs"到"顶点i"的权。
    }

    // 对"顶点vs"自身进行初始化
    flag[v0] = 1;
    P[v0] = 0;

    // 遍历G.vexnum-1次；每次找出一个顶点的最短路径。
    for (i = 1; i < G.vernum; i++)
    {
        // 寻找当前最小的路径；
        // 即，在未获取最短路径的顶点中，找到离vs最近的顶点(k)。
        min = INF;
        for (j = 0; j < G.vernum; j++)
        {
            if (flag[j]==0 && P[j]<min)
            {
                min = P[j];
                k = j;
            }
        }
        // 标记"顶点k"为已经获取到最短路径
        flag[k] = 1;

        // 修正当前最短路径和前驱顶点
        // 即，当已经"顶点k的最短路径"之后，更新"未获取最短路径的顶点的最短路径和前驱顶点"。
        for (j = 0; j < G.vernum; j++)
        {
            tmp = (G.arcs[k][j]==INF ? INF : (min + G.arcs[k][j])); // 防止溢出
            if (flag[j] == 0 && (tmp  < P[j]) )
            {
                P[j] = tmp;
                D[j] = k;
            }
        }
    }

} 

void ShortestPath(AMGragh G,int v0,int D[],int P[])
{
	 printf("dijkstra(%c): \n", G.vexs[v0]);
    for (int i = 0; i < G.vernum; i++){
		if(P[i]!=INF&&P[i]!=0)
		printf("  shortest(%c, %c)=%d\n", G.vexs[v0], G.vexs[i], P[i]);
	}
        
}
                      	

/****************************************main函数*************************************/ 
int main()
{
	AMGragh G;
	CreateAMGraph(&G);
	printGraph(G);
		
    printf("请输入源顶点的编号:");
	int v0;
	scanf("%d",&v0); 
	
	int D[G.vernum],P[G.vernum];//	点数 
	Dijkstra(G,v0,D,P);
	ShortestPath(G,v0,D,P); 
} 



